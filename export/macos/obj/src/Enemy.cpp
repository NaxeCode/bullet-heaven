// Generated by Haxe 4.3.3
#include <hxcpp.h>

#ifndef INCLUDED_Enemy
#include <Enemy.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_c595a05c1c7a687d_9_new,"Enemy","new",0x35d4571a,"Enemy.new","Enemy.hx",9,0xbda88996)
HX_LOCAL_STACK_FRAME(_hx_pos_c595a05c1c7a687d_17_update,"Enemy","update",0xcf0e6f8f,"Enemy.update","Enemy.hx",17,0xbda88996)

void Enemy_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_c595a05c1c7a687d_9_new)
            	HX_STACK_THIS(this)
HXLINE(   9)
HXLINE(  10)		super::__construct(null(),null(),null());
HXLINE(  12)		this->makeGraphic(32,32,-65536,null(),null());
            	}

Dynamic Enemy_obj::__CreateEmpty() { return new Enemy_obj; }

void *Enemy_obj::_hx_vtable = 0;

Dynamic Enemy_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Enemy_obj > _hx_result = new Enemy_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Enemy_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x4fa17fa0) {
		if (inClassId<=(int)0x2c01639b) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x2c01639b;
		} else {
			return inClassId==(int)0x4fa17fa0;
		}
	} else {
		return inClassId==(int)0x7ccf8994 || inClassId==(int)0x7dab0655;
	}
}

void Enemy_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_c595a05c1c7a687d_17_update)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(elapsed,"elapsed")
HXLINE(  17)
HXDLIN(  17)		this->super::update(elapsed);
            	}



::hx::ObjectPtr< Enemy_obj > Enemy_obj::__new() {
	::hx::ObjectPtr< Enemy_obj > __this = new Enemy_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< Enemy_obj > Enemy_obj::__alloc(::hx::Ctx *_hx_ctx) {
	Enemy_obj *__this = (Enemy_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Enemy_obj), true, "Enemy"));
	*(void **)__this = Enemy_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Enemy_obj::Enemy_obj()
{
}

::hx::Val Enemy_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *Enemy_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *Enemy_obj_sStaticStorageInfo = 0;
#endif

static ::String Enemy_obj_sMemberFields[] = {
	HX_("update",09,86,05,87),
	::String(null()) };

::hx::Class Enemy_obj::__mClass;

void Enemy_obj::__register()
{
	Enemy_obj _hx_dummy;
	Enemy_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("Enemy",28,82,a8,03);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Enemy_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Enemy_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Enemy_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Enemy_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

