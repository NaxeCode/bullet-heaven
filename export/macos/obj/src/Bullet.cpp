// Generated by Haxe 4.3.3
#include <hxcpp.h>

#ifndef INCLUDED_Bullet
#include <Bullet.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_916b41f5f19492cb_9_new,"Bullet","new",0xf3208054,"Bullet.new","Bullet.hx",9,0xb42ce59c)
HX_LOCAL_STACK_FRAME(_hx_pos_916b41f5f19492cb_16_update,"Bullet","update",0xa9584695,"Bullet.update","Bullet.hx",16,0xb42ce59c)

void Bullet_obj::__construct(int X,int Y){
            	HX_STACKFRAME(&_hx_pos_916b41f5f19492cb_9_new)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(X,"X")
            	HX_STACK_ARG(Y,"Y")
HXLINE(   9)
HXLINE(  10)		super::__construct(X,Y,null());
HXLINE(  11)		this->makeGraphic(16,16,-16711681,null(),null());
            	}

Dynamic Bullet_obj::__CreateEmpty() { return new Bullet_obj; }

void *Bullet_obj::_hx_vtable = 0;

Dynamic Bullet_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Bullet_obj > _hx_result = new Bullet_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool Bullet_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x6a6fc922) {
		if (inClassId<=(int)0x2c01639b) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x2c01639b;
		} else {
			return inClassId==(int)0x6a6fc922;
		}
	} else {
		return inClassId==(int)0x7ccf8994 || inClassId==(int)0x7dab0655;
	}
}

void Bullet_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_916b41f5f19492cb_16_update)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(elapsed,"elapsed")
HXLINE(  16)
HXDLIN(  16)		this->super::update(elapsed);
            	}



::hx::ObjectPtr< Bullet_obj > Bullet_obj::__new(int X,int Y) {
	::hx::ObjectPtr< Bullet_obj > __this = new Bullet_obj();
	__this->__construct(X,Y);
	return __this;
}

::hx::ObjectPtr< Bullet_obj > Bullet_obj::__alloc(::hx::Ctx *_hx_ctx,int X,int Y) {
	Bullet_obj *__this = (Bullet_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Bullet_obj), true, "Bullet"));
	*(void **)__this = Bullet_obj::_hx_vtable;
	__this->__construct(X,Y);
	return __this;
}

Bullet_obj::Bullet_obj()
{
}

::hx::Val Bullet_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *Bullet_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *Bullet_obj_sStaticStorageInfo = 0;
#endif

static ::String Bullet_obj_sMemberFields[] = {
	HX_("update",09,86,05,87),
	::String(null()) };

::hx::Class Bullet_obj::__mClass;

void Bullet_obj::__register()
{
	Bullet_obj _hx_dummy;
	Bullet_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("Bullet",62,06,25,09);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Bullet_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Bullet_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Bullet_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Bullet_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

